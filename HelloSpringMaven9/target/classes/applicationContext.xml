<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:aop="http://www.springframework.org/schema/aop"
 xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
  
  <!-- aopxml1.xml -->
  
 <bean name="securityBean"   class="helloProcess.Security"/> <!-- 빈 객체 생성 -->
  
 <bean name="helloProcessBean"   class="helloProcess.HelloProcess"/>     <!-- 빈객체생성 -->
    
 <aop:config> <!-- 빈과 별도로 aop 구성 --> 
  <aop:aspect id="securityAspect" ref="securityBean"> <!-- 공통은 이것 -->
      <aop:pointcut expression="within(helloProcess.HelloProcess)" id="secuPoint"/> 
                                   <!-- 공통이 적용된 부분  ...멋지게 드라이브하자 -->
      <aop:before pointcut-ref="secuPoint"  method="goSecurity"/> 
                 <!-- poincut으로 지정한 부분이 실행되기전 goSecurity가 가동됨  
                  즉,  HelloProcess 의 kajaDrive()메소드가   가동되기 전(before) 보안처리 함 -->
      <aop:after pointcut-ref="secuPoint" method="goSecurity2"/>
  </aop:aspect>
 </aop:config>
</beans>     